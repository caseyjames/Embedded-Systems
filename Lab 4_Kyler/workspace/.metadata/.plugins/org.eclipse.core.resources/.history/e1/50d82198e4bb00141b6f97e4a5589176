waitStr: 	.asciz "Handling IRQ FABINT %d\n\r"
	.align 2

@ Global variables (must be in the .data section)
	.data
//count:	.word	0

	.text
	.syntax	unified
	.thumb



@Fabric_IRQHandler

    .global   Fabric_IRQHandler
    .type   Fabric_IRQHandler, %function

Fabric_IRQHandler:
	push 	{r0,r1,r2,r3, lr}

	movw	r0,	#:lower16:waitStr
	movt	r0,	#:upper16:waitStr
	add		r12,#1

//	ldr 	r6, =count
//	ldr 	r4,[r6,#0]
//	add		r4, #1
//	mov 	r1, r4
//	str 	r1, [r6, #0]



	bl printf373
	mov r0, #31
    bl ClearPendingIRQ
    pop		{r0,r1,r2,r3, lr}
    @B .
    bx lr

@ Enable the IRQ
@ Inputs: IRQ number in r0
@ Output:
	.equ 	Enable, 0xe000e100
	.global	EnableIRQ,
	.type	EnableIRQ, %function
EnableIRQ:
	push	{r4,r5,r6,r7} @ Callee Save

	@ Load NVIC_ISER (Set-Enable Registers) start address
		@ldr		r4, =0xe000e100

		movw	r4, #:lower16:Enable
		movt	r4, #:upper16:Enable
	@ Select register to modify
		@ store 32 into r6 and divide reg r0 by

		mov		r6, #32
		udiv	r5, r0, r6
		lsl		r5, #2
		add 	r4, r5
		lsl		r5, #3
		sub		r0, r0, r5
	@ Select bit to set in the register
		mov		r7, 0x1
		lsl		r7, r0
		str r7, [r4]
	@ Set bit
		str		r7, [r4]
	pop	{r4,r5,r6,r7}
	bx	lr


	@ Clear the pending the IRQ
@ Inputs: IRQ number in r0
@ Output:
	.equ 	ClearPending, 0xe000e280
	.global	ClearPendingIRQ
	.type	ClearPendingIRQ, %function
ClearPendingIRQ:
	push	{r4,r5,r6,r7} @ Callee Save

	@ Load NVIC_ICPR (Clear-Pending Registers) start address
		movw	r4, #:lower16:ClearPending
		movt	r4, #:upper16:ClearPending
	@ Select register to modify
		@ store 32 into r6 and divide reg r0 by

		mov		r6, #32
		udiv	r5, r0, r6
		lsl		r5, #2
		add 	r4, r5
		lsl		r5, #3
		sub		r0, r0, r5
	@ Select bit to set in the register
		mov		r7, 0x1
		lsl		r7, r0
		str r7, [r4]
	@ Set bit
		str		r0, [r4]
	pop	{r4,r5,r6,r7}
	bx 	lr






